public static string Calendar(Context context, SiteSettings ss)
{
    if (!ss.EnableViewMode(context: context, name: "Calendar"))
    {
        return HtmlTemplates.Error(
            context: context,
            errorData: new ErrorData(type: Error.Types.HasNotPermission));
    }
    var hb = new HtmlBuilder();
    var view = Views.GetBySession(context: context, ss: ss);
    var viewMode = ViewModes.GetSessionData(
        context: context,
        siteId: ss.SiteId);
    var timePeriod = view.GetCalendarTimePeriod(ss: ss);
    var fromColumn = ss.GetColumn(
        context: context,
        columnName: view.GetCalendarFromColumn(ss));
    var toColumn = ss.GetColumn(
        context: context,
        columnName: view.GetCalendarToColumn(ss));
    var month = view.CalendarMonth != null
        ? view.CalendarMonth.ToDateTime()
        : DateTime.Now;
    var begin = Calendars.BeginDate(
        context: context,
        date: month,
        timePeriod: timePeriod);
    var end = Calendars.EndDate(
        context: context,
        date: month,
        timePeriod: timePeriod);
    var dataRows = CalendarDataRows(
        context: context,
        ss: ss,
        view: view,
        fromColumn: fromColumn,
        toColumn: toColumn,
        begin: Calendars.BeginDate(
            context: context,
            date: month,
            timePeriod: timePeriod),
        end: Calendars.EndDate(
            context: context,
            date: month,
            timePeriod: timePeriod));
    var inRange = dataRows.Count() <= Parameters.General.CalendarLimit;
    if (!inRange)
    {
        SessionUtilities.Set(
            context: context,
            message: Messages.TooManyCases(
                context: context,
                data: Parameters.General.CalendarLimit.ToString()));
    }
    return hb.ViewModeTemplate(
        context: context,
        ss: ss,
        view: view,
        viewMode: viewMode,
        viewModeBody: () => hb
            .Calendar(
                context: context,
                ss: ss,
                timePeriod: timePeriod,
                fromColumn: fromColumn,
                toColumn: toColumn,
                month: month,
                begin: begin,
                dataRows: dataRows,
                bodyOnly: false,
                inRange: inRange));
}

public static string UpdateByCalendar(Context context, SiteSettings ss)
{
    var #modelName#Model = new #ModelName#Model(
        context: context,
        ss: ss,
        #modelName#Id: context.Forms.Long("Id"),
        formData: context.Forms);
    var invalid = #ModelName#Validators.OnUpdating(
        context: context,
        ss: ss,
        #modelName#Model: #modelName#Model);
    switch (invalid.Type)
    {
        case Error.Types.None: break;
        default: return invalid.Type.MessageJson(context: context);
    }
    if (#modelName#Model.AccessStatus != Databases.AccessStatuses.Selected)
    {
        return Messages.ResponseDeleteConflicts(context: context).ToJson();
    }
    #modelName#Model.VerUp = Versions.MustVerUp(
        context: context, baseModel: #modelName#Model);
    #modelName#Model.Update(
        context: context,
        ss: ss,
        notice: true);
    return CalendarJson(
        context: context,
        ss: ss,
        changedItemId: #modelName#Model.#ModelName#Id,
        update: true,
        message: Messages.Updated(
            context: context,
            data: #modelName#Model.Title.DisplayValue));
}

public static string CalendarJson(
    Context context,
    SiteSettings ss,
    long changedItemId = 0,
    bool update = false,
    Message message = null)
{
    if (!ss.EnableViewMode(context: context, name: "Calendar"))
    {
        return Messages.ResponseHasNotPermission(context: context).ToJson();
    }
    var view = Views.GetBySession(context: context, ss: ss);
    var bodyOnly = context.Forms.ControlId().StartsWith("Calendar");
    var timePeriod = view.GetCalendarTimePeriod(ss: ss);
    var fromColumn = ss.GetColumn(
        context: context,
        columnName: view.GetCalendarFromColumn(ss));
    var toColumn = ss.GetColumn(
        context: context,
        columnName: view.GetCalendarToColumn(ss));
    var month = view.CalendarMonth != null
        ? view.CalendarMonth.ToDateTime()
        : DateTime.Now;
    var begin = Calendars.BeginDate(
        context: context,
        date: month,
        timePeriod: timePeriod);
    var end = Calendars.EndDate(
        context: context,
        date: month,
        timePeriod: timePeriod);
    var dataRows = CalendarDataRows(
        context: context,
        ss: ss,
        view: view,
        fromColumn: fromColumn,
        toColumn: toColumn,
        begin: Calendars.BeginDate(
            context: context,
            date: month,
            timePeriod: timePeriod),
        end: Calendars.EndDate(
            context: context,
            date: month,
            timePeriod: timePeriod));
    return dataRows.Count() <= Parameters.General.CalendarLimit
        ? new ResponseCollection()
            .ViewMode(
                context: context,
                ss: ss,
                view: view,
                invoke: "setCalendar",
                message: message,
                loadScroll: update,
                bodyOnly: bodyOnly,
                bodySelector: "#CalendarBody",
                body: new HtmlBuilder()
                    .Calendar(
                        context: context,
                        ss: ss,
                        timePeriod: timePeriod,
                        fromColumn: fromColumn,
                        toColumn: toColumn,
                        month: month,
                        begin: begin,
                        dataRows: dataRows,
                        bodyOnly: bodyOnly,
                        inRange: true,
                        changedItemId: changedItemId))
            .ToJson()
        : new ResponseCollection()
            .ViewMode(
                context: context,
                ss: ss,
                view: view,
                message: Messages.TooManyCases(
                    context: context,
                    data: Parameters.General.CalendarLimit.ToString()),
                bodyOnly: bodyOnly,
                bodySelector: "#CalendarBody",
                body: new HtmlBuilder()
                    .Calendar(
                        context: context,
                        ss: ss,
                        timePeriod: timePeriod,
                        fromColumn: fromColumn,
                        toColumn: toColumn,
                        month: month,
                        begin: begin,
                        dataRows: dataRows,
                        bodyOnly: bodyOnly,
                        inRange: false,
                        changedItemId: changedItemId))
            .ToJson();
}

private static EnumerableRowCollection<DataRow> CalendarDataRows(
    Context context,
    SiteSettings ss,
    View view,
    Column fromColumn,
    Column toColumn,
    DateTime begin,
    DateTime end)
{
    var where = new SqlWhereCollection();
    if (toColumn == null)
    {
        where.Add(
            tableName: "#TableName#",
            raw: $"\"#TableName#\".\"{fromColumn.ColumnName}\" between '{begin}' and '{end}'");
    }
    else
    {
        where.Or(or: Rds.#TableName#Where()
            .Add(raw: $"\"#TableName#\".\"{fromColumn.ColumnName}\" between '{begin}' and '{end}'")
            .Add(raw: $"\"#TableName#\".\"{toColumn.ColumnName}\" between '{begin}' and '{end}'")
            .Add(raw: $"\"#TableName#\".\"{fromColumn.ColumnName}\"<='{begin}' and \"#TableName#\".\"{toColumn.ColumnName}\">='{end}'"));
    }
    where = view.Where(context: context, ss: ss, where: where);
    return Repository.ExecuteTable(
        context: context,
        statements: Rds.Select#TableName#(
            column: Rds.#TableName#TitleColumn(
                context: context,
                ss: ss)
                    .#ModelName#Id(_as: "Id")
                    .#TableName#Column(
                        columnName: fromColumn.ColumnName,
                        _as: "From")
                    .#TableName#Column(
                        columnName: toColumn?.ColumnName,
                        _as: "To")
                    .UpdatedTime()
                    .ItemTitle(ss.ReferenceType),
            join: ss.Join(
                context: context,
                join: where),
            where: where))
                .AsEnumerable();
}

private static HtmlBuilder Calendar(
    this HtmlBuilder hb,
    Context context,
    SiteSettings ss,
    string timePeriod,
    Column fromColumn,
    Column toColumn,
    DateTime month,
    DateTime begin,
    EnumerableRowCollection<DataRow> dataRows,
    bool bodyOnly,
    bool inRange,
    long changedItemId = 0)
{
    return !bodyOnly
        ? hb.Calendar(
            context: context,
            ss: ss,
            timePeriod: timePeriod,
            fromColumn: fromColumn,
            toColumn: toColumn,
            month: month,
            begin: begin,
            dataRows: dataRows,
            inRange: inRange,
            changedItemId: changedItemId)
        : hb.CalendarBody(
            context: context,
            ss: ss,
            timePeriod: timePeriod,
            fromColumn: fromColumn,
            toColumn: toColumn,
            month: month,
            begin: begin,
            dataRows: dataRows,
            inRange: inRange,
            changedItemId: changedItemId);
}