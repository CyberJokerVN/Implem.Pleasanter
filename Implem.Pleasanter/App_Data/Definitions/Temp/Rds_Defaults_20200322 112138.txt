public static #TableName#ColumnCollection #TableName#DefaultColumns()
{
    var column = #TableName#Column()

<!--Rds_ColumnDefault-->;

    Def.ColumnDefinitionCollection
        .Where(columnDefinition => columnDefinition.TableName == "#TableName#")
        .Where(columnDefinition => !columnDefinition.ExtendedColumnType.IsNullOrEmpty())
        .ForEach(columnDefinition =>
            column.#TableName#Column(columnDefinition.ColumnName));
    return column;
}

<!--Rds_ItemEditorColumns-->

public static #TableName#JoinCollection #TableName#JoinDefault()
{
    var join = #TableName#Join();

<!--Rds_JoinDefault-->

    return join;
}

public static #TableName#WhereCollection #TableName#WhereDefault(#ModelName#Model #modelName#Model)
{
    return #TableName#Where()

<!--Rds_Where_TenantId-->
<!--Rds_WherePk--><!--Rds_WherePkSemicolon-->
<!--Rds_Where_SiteId-->
<!--Rds_Where_ItemId-->
<!--Rds_OnSelectingWhereExtendedSqls-->
}

public static #TableName#ParamCollection #TableName#ParamDefault(
    Context context,
    #ModelName#Model #modelName#Model,
    bool setDefault = false,
    bool otherInitValue = false)
{
    var param = #TableName#Param()

<!--Rds_ParamDefault_TenantId-->
<!--Rds_ParamItemId-->
<!--Rds_ParamDefault-->;

    #modelName#Model.ClassHash
        .Where(o => #modelName#Model.Class_Updated(columnName: o.Key)
            || (otherInitValue && !#modelName#Model.Class(columnName: o.Key)
                .InitialValue(context: context)))
        .ForEach(o =>
            param.Add(
                columnBracket: $"\"{o.Key}\"",
                name: o.Key,
                value: o.Value.MaxLength(1024)));
    #modelName#Model.NumHash
        .Where(o => #modelName#Model.Num_Updated(columnName: o.Key)
            || (otherInitValue && !#modelName#Model.Num(columnName: o.Key)
                .InitialValue(context: context)))
        .ForEach(o =>
            param.Add(
                columnBracket: $"\"{o.Key}\"",
                name: o.Key,
                value: o.Value));
    #modelName#Model.DateHash
        .Where(o => #modelName#Model.Date_Updated(columnName: o.Key)
            || (otherInitValue && !#modelName#Model.Date(columnName: o.Key)
                .InitialValue(context: context)))
        .ForEach(o =>
            param.Add(
                columnBracket: $"\"{o.Key}\"",
                name: o.Key,
                value: o.Value));
    #modelName#Model.DescriptionHash
        .Where(o => #modelName#Model.Description_Updated(columnName: o.Key)
            || (otherInitValue && !#modelName#Model.Description(columnName: o.Key)
                .InitialValue(context: context)))
        .ForEach(o =>
            param.Add(
                columnBracket: $"\"{o.Key}\"",
                name: o.Key,
                value: o.Value));
    #modelName#Model.CheckHash
        .Where(o => #modelName#Model.Check_Updated(columnName: o.Key)
            || (otherInitValue && !#modelName#Model.Check(columnName: o.Key)
                .InitialValue(context: context)))
        .ForEach(o =>
            param.Add(
                columnBracket: $"\"{o.Key}\"",
                name: o.Key,
                value: o.Value));
    #modelName#Model.AttachmentsHash
        .Where(o => #modelName#Model.Attachments_Updated(columnName: o.Key)
            || (otherInitValue && !#modelName#Model.Attachments(columnName: o.Key)
                .InitialValue(context: context)))
        .ForEach(o =>
            param.Add(
                columnBracket: $"\"{o.Key}\"",
                name: o.Key,
                value: o.Value?.RecordingJson() ?? string.Empty));
    return param;
}