using Implem.Libraries.DataSources.SqlServer;
using Implem.Libraries.Utilities;
using Implem.Pleasanter.Libraries.DataSources;
using Implem.Pleasanter.Libraries.Requests;
using Implem.Pleasanter.Libraries.Security;
using Implem.Pleasanter.Models;
using System.Collections.Generic;
using System.Data;
using System.Linq;
namespace Implem.Pleasanter.Libraries.Settings
{
    public static class SiteSettingsUtilities
    {
        public const decimal Version = 1.016M;

        public static SiteSettings Get(
            Context context,
            long siteId,
            long referenceId = 0,
            bool setSiteIntegration = false,
            bool setAllChoices = false,
            Sqls.TableTypes tableType = Sqls.TableTypes.Normal)
        {
            return Get(
                context: context,
                siteModel: new SiteModel(context: context, siteId: siteId),
                referenceId: referenceId != 0
                    ? referenceId
                    : siteId,
                setSiteIntegration: setSiteIntegration,
                setAllChoices: setAllChoices,
                tableType: tableType);
        }

        public static SiteSettings Get(Context context, DataRow dataRow)
        {
            return dataRow != null
                ? dataRow.String("SiteSettings").DeserializeSiteSettings(context: context)
                    ?? Get(
                        context: context,
                        referenceType: dataRow.String("ReferenceType"),
                        siteId: dataRow.Long("SiteId"))
                : null;
        }

        public static SiteSettings Get(this List<SiteSettings> ssList, long siteId)
        {
            return ssList.FirstOrDefault(o => o.SiteId == siteId);
        }

        public static View Get(this List<View> views, int? id)
        {
            return views?.FirstOrDefault(o => o.Id == id);
        }

        public static SiteSettings Get(Context context, string referenceType, long siteId)
        {
            switch (referenceType)
            {

<!--SiteSettings_GetCases-->

                default: return new SiteSettings() { SiteId = siteId };
            }
        }

        public static SiteSettings Get(
            Context context,
            SiteModel siteModel,
            long referenceId,
            bool setSiteIntegration = false,
            bool setAllChoices = false,
            Sqls.TableTypes tableType = Sqls.TableTypes.Normal)
        {
            switch (siteModel.ReferenceType)
            {

<!--SiteSettings_GetByItemCases-->

                default: return new SiteSettings() { SiteId = siteModel.SiteId };
            }
        }
        
        public static SiteSettings GetByReference(
            Context context, string reference, long referenceId)
        {
            switch (reference.ToLower())
            {

<!--SiteSettings_GetByReferenceCases-->

                case "items": return Get(
                    context: context,
                    siteModel: new ItemModel(
                        context: context,
                        referenceId: referenceId)
                            .GetSite(context: context),
                    referenceId: referenceId);
                default: return null;
            }
        }

<!--SiteSettings_GetModels-->
<!--SiteSettings_GetModels_Items-->
<!--SiteSettings_GetModels_Includes-->

        public static SiteSettings GetByDataRow(Context context, long siteId)
        {
            var dataRow = Repository.ExecuteTable(
                context: context,
                statements: Rds.SelectSites(
                    column: Rds.SitesColumn()
                        .SiteSettings()
                        .Title()
                        .InheritPermission(),
                    where: Rds.SitesWhere()
                        .TenantId(context.TenantId)
                        .SiteId(siteId)))
                            .AsEnumerable()
                            .FirstOrDefault();
            if (dataRow != null)
            {
                var ss = dataRow
                    .String("SiteSettings")
                    .DeserializeSiteSettings(context: context) ?? new SiteSettings();
                ss.SiteId = siteId;
                ss.Title = dataRow.String("Title");
                ss.InheritPermission = dataRow.Long("InheritPermission");
                return ss;
            }
            else
            {
                return null;
            }
        }
    }
}