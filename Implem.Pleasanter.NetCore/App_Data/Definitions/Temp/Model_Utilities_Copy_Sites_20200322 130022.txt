public static string Copy(Context context, SiteModel siteModel)
{
    var ss = siteModel.SiteSettings;

<!--Model_Utilities_Limit-->

    siteModel.Title.Value += Displays.SuffixCopy(context: context);
    if (!context.Forms.Bool("CopyWithComments"))
    {
        siteModel.Comments.Clear();
    }
    var beforeSiteId = siteModel.SiteId;
    var beforeInheritPermission = siteModel.InheritPermission;
    var errorData = siteModel.Create(context: context, otherInitValue: true);
    if (siteModel.SiteSettings.Exports?.Any() == true)
    {
        Repository.ExecuteNonQuery(
            context: context,
            statements: Rds.UpdateSites(
                where: Rds.SitesWhere()
                    .TenantId(context.TenantId)
                    .SiteId(siteModel.SiteId),
                param: Rds.SitesParam()
                    .SiteSettings(siteModel.SiteSettings.RecordingJson(
                        context: context))));
    }
    if (beforeSiteId == beforeInheritPermission)
    {
        var dataTable = Repository.ExecuteTable(
            context: context,
            statements: Rds.SelectPermissions(
                column: Rds.PermissionsColumn()
                    .ReferenceId()
                    .DeptId()
                    .GroupId()
                    .UserId()
                    .PermissionType(),
                where: Rds.PermissionsWhere()
                    .ReferenceId(beforeSiteId)));
        var statements = new List<SqlStatement>();
        dataTable
            .AsEnumerable()
            .ForEach(dataRow =>
                statements.Add(Rds.InsertPermissions(
                    param: Rds.PermissionsParam()
                        .ReferenceId(siteModel.SiteId)
                        .DeptId(dataRow.Long("DeptId"))
                        .GroupId(dataRow.Long("GroupId"))
                        .UserId(dataRow.Long("UserId"))
                        .PermissionType(dataRow.Long("PermissionType")))));
        statements.Add(
            Rds.UpdateSites(
                where: Rds.SitesWhere()
                    .TenantId(context.TenantId)
                    .SiteId(siteModel.SiteId),
                param: Rds.SitesParam()
                    .InheritPermission(siteModel.SiteId)));
        Repository.ExecuteNonQuery(
            context: context,
            transactional: true,
            statements: statements.ToArray());
    }
    return errorData.Type.Has()
        ? errorData.Type.MessageJson(context: context)
        : EditorResponse(
            context: context,
            siteModel: siteModel,
            message: Messages.Copied(context: context)).ToJson();
}