using Implem.DefinitionAccessor;
using Implem.Libraries.Classes;
using Implem.Libraries.DataSources.SqlServer;
using Implem.Libraries.Utilities;
using Implem.Pleasanter.Libraries.DataSources;
using Implem.Pleasanter.Libraries.DataTypes;
using Implem.Pleasanter.Libraries.Extensions;
using Implem.Pleasanter.Libraries.General;
using Implem.Pleasanter.Libraries.Html;
using Implem.Pleasanter.Libraries.HtmlParts;
using Implem.Pleasanter.Libraries.Models;
using Implem.Pleasanter.Libraries.Requests;
using Implem.Pleasanter.Libraries.Responses;
using Implem.Pleasanter.Libraries.Security;
using Implem.Pleasanter.Libraries.Server;
using Implem.Pleasanter.Libraries.Settings;
using System;
using System.Collections.Generic;
using System.Data;
using System.Data.Common;
using System.Linq;
namespace Implem.Pleasanter.Models
{
    [Serializable]
    public class #ModelName#Model : <!--Model_InheritBase--><!--Model_InheritBaseItem--><!--Model_IConvertable-->
    {

<!--Model_ItemProperties_Sites-->
<!--Base_Property ( RepeatType = Column, NotBase = 1 ) -->
<!--Base_PropertyCalc ( RepeatType = Column, NotBase = 1 ) -->
<!--Base_SavedProperty ( RepeatType = Column, NotBase = 1 ) -->
<!--Base_PropertyUpdated ( RepeatType = Column, NotBase = 1 ) -->
<!--Base_PropertyUpdated_DateTime ( RepeatType = Column, NotBase = 1 ) -->
<!--Base_PropertyUpdated_Bin ( RepeatType = Column, NotBase = 1 ) -->
<!--Model_SessionProperties ( RepeatType = Column ) -->
<!--Model_PropertyValue-->
<!--Model_CsvData-->
<!--Model_SwitchTargets-->
<!--Model_Constructor ( HasIdentity = true ) -->
<!--Model_Constructor ( ItemOnly = true ) -->

        public #ModelName#Model(
            Context context,

            <!--Model_SiteSettingsParameter-->

            DataRow dataRow,

            <!--Model_FormDataParameter-->

            string tableAlias = null)
        {
            OnConstructing(context: context);
            Context = context;

<!--Model_SetTenantId-->

            if (dataRow != null)
            {
                Set(
                    context: context,

                    <!--Model_SiteSettingsWithParameterNameLower-->

                    dataRow: dataRow,
                    tableAlias: tableAlias);
            }

<!--Model_SetByFormExec-->

            OnConstructed(context: context);
        }

        private void OnConstructing(Context context)
        {
        }

        private void OnConstructed(Context context)
        {
        }

        public void ClearSessions(Context context)
        {

<!--Model_ClearSessions-->

        }

<!--Model_Get-->
<!--Model_GetByApi-->
<!--Model_ExportByApi-->
<!--Model_FullText-->
<!--Model_Create ( HasIdentity = true ) -->
<!--Model_Create ( ItemOnly = true ) -->
<!--Model_Update ( HasIdentity = true ) -->
<!--Model_Update ( ItemOnly = true ) -->
<!--Model_UpdateOrCreate ( HasIdentity = true ) -->
<!--Model_UpdateOrCreate ( ItemOnly = true ) -->
<!--Model_Move-->
<!--Model_Delete ( HasIdentity = true ) -->
<!--Model_Delete ( ItemOnly = true ) -->
<!--Model_Delete_Sites-->
<!--Model_Restore ( HasIdentity = true ) -->
<!--Model_Restore ( ItemOnly = true ) -->
<!--Model_PhysicalDelete ( HasIdentity = true ) -->
<!--Model_PhysicalDelete ( ItemOnly = true ) -->
<!--Model_IfDuplicatedStatements-->
<!--Model_SetDefault-->
<!--Model_SetByForm ( HasIdentity = true ) -->
<!--Model_SetByForm ( ItemOnly = true ) -->
<!--Model_SetByModel-->
<!--Model_SetByApi-->
<!--Model_SynchronizeSummary-->
<!--Model_UpdateFormulaColumns-->
<!--Model_SwitchItems-->
<!--Model_SwitchItems2-->
<!--Model_SetByFormula-->
<!--Model_SetTitle-->
<!--Model_Matched-->
<!--Model_Notice-->

        private void SetBySession(Context context)
        {

<!--Model_SetBySession-->

        }

        private void Set(Context context, <!--Model_SiteSettingsParameterAndBlank-->DataTable dataTable)
        {
            switch (dataTable.Rows.Count)
            {
                case 1: Set(context, <!--Model_SiteSettings-->dataTable.Rows[0]); break;
                case 0: AccessStatus = Databases.AccessStatuses.NotFound; break;
                default: AccessStatus = Databases.AccessStatuses.Overlap; break;
            }

<!--Model_SetChoiceHash-->

        }

<!--Model_SetChoiceHashMethod-->

        private void Set(Context context, <!--Model_SiteSettingsParameterAndBlank-->DataRow dataRow, string tableAlias = null)
        {
            AccessStatus = Databases.AccessStatuses.Selected;
            foreach(DataColumn dataColumn in dataRow.Table.Columns)
            {
                var column = new ColumnNameInfo(dataColumn.ColumnName);
                if (column.TableAlias == tableAlias)
                {
                    switch (column.Name)
                    {

<!--Model_SetPk-->
<!--Model_Set-->

                        case "IsHistory":
                            VerType = dataRow.Bool(column.ColumnName)
                                ? Versions.VerTypes.History
                                : Versions.VerTypes.Latest; break;
                        default:
                            switch (Def.ExtendedColumnTypes.Get(column.Name))
                            {
                                case "Class":
                                    Class(
                                        columnName: column.Name,
                                        value: dataRow[column.ColumnName].ToString());
                                    SavedClass(
                                        columnName: column.Name,
                                        value: Class(columnName: column.Name));
                                    break;
                                case "Num":
                                    Num(
                                        columnName: column.Name,
                                        value: dataRow[column.ColumnName].ToDecimal());
                                    SavedNum(
                                        columnName: column.Name,
                                        value: Num(columnName: column.Name));
                                    break;
                                case "Date":
                                    Date(
                                        columnName: column.Name,
                                        value: dataRow[column.ColumnName].ToDateTime());
                                    SavedDate(
                                        columnName: column.Name,
                                        value: Date(columnName: column.Name));
                                    break;
                                case "Description":
                                    Description(
                                        columnName: column.Name,
                                        value: dataRow[column.ColumnName].ToString());
                                    SavedDescription(
                                        columnName: column.Name,
                                        value: Description(columnName: column.Name));
                                    break;
                                case "Check":
                                    Check(
                                        columnName: column.Name,
                                        value: dataRow[column.ColumnName].ToBool());
                                    SavedCheck(
                                        columnName: column.Name,
                                        value: Check(columnName: column.Name));
                                    break;
                                case "Attachments":
                                    Attachments(
                                        columnName: column.Name,
                                        value: dataRow[column.ColumnName].ToString()
                                            .Deserialize<Attachments>() ?? new Attachments());
                                    SavedAttachments(
                                        columnName: column.Name,
                                        value: Attachments(columnName: column.Name).ToJson());
                                    break;
                            }
                            break;
                    }
                }
            }

<!--Model_SetTitleExec-->

        }

        public bool Updated(Context context)
        {
            return Updated()

<!--Model_Updated-->;

        }

<!--Model_Mine-->
<!--Model_IdSuffix-->

    }
}