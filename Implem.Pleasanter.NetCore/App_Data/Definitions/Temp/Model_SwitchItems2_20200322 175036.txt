public string GridRows(Context context)
{
    SetSite(context: context);
    switch (Site.ReferenceType)
    {

<!--Model_GridRowsCases-->

        default:
            return Messages.ResponseNotFound(context: context).ToJson();
    }
}

public string ReloadRow(Context context)
{
    SetSite(context: context);
    var id = context.Forms.Long("Id");
    switch (Site.ReferenceType)
    {

<!--Model_ReloadRowCases-->

        default:
            return ItemUtilities.ClearItemDataResponse(
                context: context,
                ss: Site.SiteSettings,
                id: id)
                    .Remove($"[data-id=\"{id}\"]")
                    .Message(Messages.NotFound(context: context))
                    .ToJson();
    }
}

public string CopyRow(Context context)
{
    SetSite(
        context: context,
        siteOnly: true,
        initSiteSettings: true);
    switch (Site.ReferenceType)
    {

<!--Model_CopyRowCases-->

        default:
            return Messages.ResponseNotFound(context: context).ToJson();
    }
}

public string TrashBoxGridRows(Context context)
{
    SetSite(context: context, tableType: Sqls.TableTypes.Deleted);
    switch (Site.ReferenceType)
    {

<!--Model_TrashBoxGridRowsCases-->

        default:
            return Messages.ResponseNotFound(context: context).ToJson();
    }
}

public string ImageLibNext(Context context)
{
    SetSite(context: context);
    switch (Site.ReferenceType)
    {

<!--Model_ImageLibNextCases-->

        default:
            return Messages.ResponseNotFound(context: context).ToJson();
    }
}

public System.Web.Mvc.ContentResult GetByApi(Context context, bool internalRequest = false)
{
    SetSite(context: context);
    if (!WithinApiLimits(context: context, siteModel: Site))
    {
        return ApiResults.Get(ApiResponses.OverLimitApi(
            context: context,
            siteId: Site.SiteId,
            limitPerSite: Parameters.Api.LimitPerSite));
    }
    switch (Site.ReferenceType)
    {

<!--Model_GetByApiCases-->

        default:
            return ApiResults.Get(ApiResponses.NotFound(context: context));
    }
}

private bool WithinApiLimits(Context context, SiteModel siteModel)
{
    if (siteModel.ApiCountDate.Date < DateTime.Now.Date)
    {
        siteModel.ApiCountDate = DateTime.Now;
        siteModel.ApiCount = 0;
    }
    if (Parameters.Api.LimitPerSite != 0
        && siteModel.ApiCount >= Parameters.Api.LimitPerSite)
    {
        return false;
    }
    return true;
}

public string Create(Context context)
{
    SetSite(context: context);
    switch (Site.ReferenceType)
    {
        case "Sites":
            return SiteUtilities.Create(
                context: context,
                parentId: Site.SiteId,
                inheritPermission: Site.InheritPermission);

<!--Model_CreateCases-->

        default:
            return Messages.ResponseNotFound(context: context).ToJson();
    }
}

public System.Web.Mvc.ContentResult CreateByApi(Context context)
{
    SetSite(context: context);
    if (!WithinApiLimits(context: context, siteModel: Site))
    {
        return ApiResults.Get(ApiResponses.OverLimitApi(
            context: context,
            siteId: Site.SiteId,
            limitPerSite: Parameters.Api.LimitPerSite));
    }
    switch (Site.ReferenceType)
    {

<!--Model_CreateByApiCases-->

        default:
            return ApiResults.Get(ApiResponses.NotFound(context: context));
    }
}

public string Templates(Context context)
{
    SetSite(context: context);
    switch (Site.ReferenceType)
    {
        case "Sites":
            return SiteUtilities.Templates(
                context: context,
                parentId: Site.SiteId,
                inheritPermission: Site.InheritPermission);
        default:
            return Messages.ResponseNotFound(context: context).ToJson();
    }
}

public string CreateByTemplate(Context context)
{
    SetSite(context: context);
    switch (Site.ReferenceType)
    {
        case "Sites":
            return SiteUtilities.CreateByTemplate(
                context: context,
                parentId: Site.SiteId,
                inheritPermission: Site.InheritPermission);
        default:
            return Messages.ResponseNotFound(context: context).ToJson();
    }
}

public string SiteMenu(Context context)
{
    SetSite(context: context);
    switch (Site.ReferenceType)
    {
        case "Sites":
            return SiteUtilities.SiteMenuJson(
                context: context,
                siteModel: Site);
        default:
            return Messages.ResponseNotFound(context: context).ToJson();
    }
}

public string Update(Context context)
{
    SetSite(context: context);
    switch (ReferenceType)
    {
        case "Sites":
            return SiteUtilities.Update(
                context: context,
                siteModel: Site,
                siteId: ReferenceId);

<!--Model_UpdateCases-->

        default:
            return Messages.ResponseNotFound(context: context).ToJson();
    }
}

public string OpenBulkUpdateSelectorDialog(Context context)
{
    SetSite(context: context, initSiteSettings: true);
    switch (Site.ReferenceType)
    {

<!--Model_OpenBulkUpdateSelectorDialogCases-->

        default:
            return Messages.ResponseNotFound(context: context).ToJson();
    }
}

public string BulkUpdateSelectChanged(Context context)
{
    SetSite(context: context, initSiteSettings: true);
    switch (Site.ReferenceType)
    {

<!--Model_BulkUpdateSelectChangedCases-->

        default:
            return Messages.ResponseNotFound(context: context).ToJson();
    }
}

public string BulkUpdate(Context context)
{
    SetSite(context: context);
    switch (Site.SiteSettings.ReferenceType)
    {

<!--Model_BulkUpdateCases-->

        default:
            return Messages.ResponseNotFound(context: context).ToJson();
    }
}

public string UpdateByGrid(Context context)
{
    SetSite(context: context);
    switch (Site.SiteSettings.ReferenceType)
    {

<!--Model_UpdateByGridCases-->

        default:
            return Messages.ResponseNotFound(context: context).ToJson();
    }
}

public System.Web.Mvc.ContentResult UpdateByApi(Context context)
{
    SetSite(context: context);
    if (!WithinApiLimits(context: context, siteModel: Site))
    {
        return ApiResults.Get(ApiResponses.OverLimitApi(
            context: context,
            siteId: Site.SiteId,
            limitPerSite: Parameters.Api.LimitPerSite));
    }
    switch (Site.ReferenceType)
    {

<!--Model_UpdateByApiCases-->

        default:
            return ApiResults.Get(ApiResponses.NotFound(context: context));
    }
}

public string DeleteComment(Context context)
{
    SetSite(context: context);
    switch (ReferenceType)
    {
        case "Sites":
            return SiteUtilities.Update(
                context: context,
                siteModel: Site,
                siteId: ReferenceId);

<!--Model_DeleteCommentCases-->

        default:
            return Messages.ResponseNotFound(context: context).ToJson();
    }
}

public string Copy(Context context)
{
    SetSite(context: context);
    switch (ReferenceType)
    {
        case "Sites":
            return SiteUtilities.Copy(
                context: context,
                siteModel: Site);

<!--Model_CopyCases-->

        default:
            return Messages.ResponseNotFound(context: context).ToJson();
    }
}

public string MoveTargets(Context context)
{
    SetSite(context: context);
    return new ResponseCollection().Html("#MoveTargets", new HtmlBuilder()
        .OptionCollection(
            context: context,
            optionCollection: Site.SiteSettings.MoveTargetsSelectableOptions(
                context: context,
                enabled: true)))
                    .ToJson();
}

public string Move(Context context)
{
    SetSite(context: context);
    switch (ReferenceType)
    {

<!--Model_MoveCases-->

        default:
            return Messages.ResponseNotFound(context: context).ToJson();
    }
}

public string BulkMove(Context context)
{
    SetSite(context: context);
    switch (Site.ReferenceType)
    {

<!--Model_BulkMoveCases-->

        default:
            return Messages.ResponseNotFound(context: context).ToJson();
    }
}

public string Delete(Context context)
{
    SetSite(context: context);
    switch (ReferenceType)
    {

<!--Model_DeleteCases-->

        default:
            return Messages.ResponseNotFound(context: context).ToJson();
    }
}

public System.Web.Mvc.ContentResult DeleteByApi(Context context)
{
    SetSite(context: context);
    if (!WithinApiLimits(context: context, siteModel: Site))
    {
        return ApiResults.Get(ApiResponses.OverLimitApi(
            context: context,
            siteId: Site.SiteId,
            limitPerSite: Parameters.Api.LimitPerSite));
    }

    switch (Site.ReferenceType)
    {

<!--Model_DeleteByApiCases-->

        default:
            return ApiResults.Get(ApiResponses.NotFound(context: context));
    }
}

public string BulkDelete(Context context)
{
    SetSite(context: context);
    switch (Site.ReferenceType)
    {

<!--Model_BulkDeleteCases-->

        default:
            return Messages.ResponseNotFound(context: context).ToJson();
    }
}

public string DeleteHistory(Context context)
{
    SetSite(
        context: context,
        initSiteSettings: true,
        tableType: Sqls.TableTypes.History);
    if (SiteId == ReferenceId)
    {
        return SiteUtilities.DeleteHistory(
            context: context,
            ss: Site.SiteSettings,
            siteId: ReferenceId);
    }
    else
    {
        switch (Site.ReferenceType)
        {

<!--Model_DeleteHistoryCases-->

            default:
                return Messages.ResponseNotFound(context: context).ToJson();
        }
    }
}

public string PhysicalDelete(Context context)
{
    SetSite(context: context, tableType: Sqls.TableTypes.Deleted);
    switch (Site.ReferenceType)
    {

<!--Model_PhysicalDeleteCases-->

        default:
            return Messages.ResponseNotFound(context: context).ToJson();
    }
}

public string Restore(Context context)
{
    SetSite(context: context, tableType: Sqls.TableTypes.Deleted);
    switch (Site.ReferenceType)
    {

<!--Model_RestoreCases-->

        default:
            return Messages.ResponseNotFound(context: context).ToJson();
    }
}

public string RestoreFromHistory(Context context)
{
    SetSite(context: context, tableType: Sqls.TableTypes.History);
    switch (ReferenceType)
    {

<!--Model_RestoreFromHistoryCases-->

        default:
            return Messages.ResponseNotFound(context: context).ToJson();
    }
}

public string EditSeparateSettings(Context context)
{
    SetSite(context: context);
    switch (Site.ReferenceType)
    {

<!--Model_EditSeparateSettingsCases-->

        default:
            return Messages.ResponseNotFound(context: context).ToJson();
    }
}

public string Separate(Context context)
{
    SetSite(context: context);
    switch (Site.ReferenceType)
    {

<!--Model_SeparateCases-->

        default:
            return Messages.ResponseNotFound(context: context).ToJson();
    }
}

public string Histories(Context context)
{
    SetSite(
        context: context,
        initSiteSettings: true,
        tableType: Sqls.TableTypes.NormalAndHistory);
    switch (ReferenceType)
    {
        case "Sites":
            return SiteUtilities.Histories(
                context: context,
                siteModel: Site);

<!--Model_HistoriesCases-->

        default:
            return Messages.ResponseNotFound(context: context).ToJson();
    }
}

public string History(Context context)
{
    SetSite(
        context: context,
        initSiteSettings: true,
        tableType: Sqls.TableTypes.History);
    switch (ReferenceType)
    {
        case "Sites":
            return SiteUtilities.History(
                context: context,
                siteModel: Site);

<!--Model_HistoryCases-->

        default:
            return Messages.ResponseNotFound(context: context).ToJson();
    }
}

public string EditorJson(Context context)
{
    SetSite(context: context, initSiteSettings: true);
    switch (ReferenceType)
    {
        case "Sites":
            return SiteUtilities.EditorJson(
        context: context,
                siteModel: Site);
        case "Issues":
            return IssueUtilities.EditorJson(
                context: context,
                ss: Site.SiteSettings,
                issueId: ReferenceId);
        case "Results":
            return ResultUtilities.EditorJson(
                context: context,
                ss: Site.SiteSettings,
                resultId: ReferenceId);
        case "Wikis":
            return WikiUtilities.EditorJson(
                context: context,
                ss: Site.SiteSettings,
                wikiId: ReferenceId);
        default:
            return Messages.ResponseNotFound(context: context).ToJson();
    }
}

public string UpdateByCalendar(Context context)
{
    SetSite(context: context);
    switch (Site.ReferenceType)
    {
        case "Issues":
            return IssueUtilities.UpdateByCalendar(
                context: context,
                ss: Site.IssuesSiteSettings(
                    context: context,
                    referenceId: ReferenceId,
                    setSiteIntegration: true,
                    setAllChoices: true));
        case "Results":
            return ResultUtilities.UpdateByCalendar(
                context: context,
                ss: Site.ResultsSiteSettings(
                    context: context,
                    referenceId: ReferenceId,
                    setSiteIntegration: true,
                    setAllChoices: true));
        default:
            return Messages.ResponseNotFound(context: context).ToJson();
    }
}

public string UpdateByKamban(Context context)
{
    SetSite(context: context);
    switch (Site.ReferenceType)
    {
        case "Issues":
            return IssueUtilities.UpdateByKamban(
                context: context,
                ss: Site.IssuesSiteSettings(
                    context: context,
                    referenceId: ReferenceId,
                    setSiteIntegration: true,
                    setAllChoices: true));
        case "Results":
            return ResultUtilities.UpdateByKamban(
                context: context,
                ss: Site.ResultsSiteSettings(
                    context: context,
                    referenceId: ReferenceId,
                    setSiteIntegration: true,
                    setAllChoices: true));
        default:
            return Messages.ResponseNotFound(context: context).ToJson();
    }
}

public string OpenImportSitePackageDialog(Context context)
{
    SetSite(
        context: context,
        initSiteSettings: true,
        setSiteIntegration: true);
    switch (Site.ReferenceType)
    {
        case "Sites":
            return Libraries.SitePackages.Utilities.OpenImportSitePackageDialog(
                context: context,
                ss: Site.SiteSettings);
        case "Issues":
        case "Results":
        case "Wikis":
            return Libraries.SitePackages.Utilities.OpenImportSitePackageDialog(
                context: context,
                ss: Site.SiteSettings);
        default:
            return Messages.ResponseNotFound(context: context).ToJson();
    }
}

public string ImportSitePackage(Context context)
{
    SetSite(
        context: context,
        initSiteSettings: true,
        setSiteIntegration: true);
    switch (Site.ReferenceType)
    {
        case "Sites":
            return Libraries.SitePackages.Utilities.ImportSitePackage(
                context: context,
                ss: Site.SiteSettings);
        case "Issues":
        case "Results":
        case "Wikis":
        default:
            throw new NotImplementedException();
    }
}

public string OpenExportSitePackageDialog(Context context)
{
    SetSite(
        context: context,
        initSiteSettings: true,
        setSiteIntegration: true);
    switch (Site.ReferenceType)
    {
        case "Sites":
            return Libraries.SitePackages.Utilities.OpenExportSitePackageDialog(
                context: context,
                ss: Site.SiteSettings,
                recursive: true);
        case "Issues":
        case "Results":
        case "Wikis":
            return Libraries.SitePackages.Utilities.OpenExportSitePackageDialog(
                context: context,
                ss: Site.SiteSettings,
                recursive: false);
        default:
            return Messages.ResponseNotFound(context: context).ToJson();
    }
}

public ResponseFile ExportSitePackage(Context context)
{
    SetSite(
        context: context,
        initSiteSettings: true,
        setSiteIntegration: true);
    switch (Site.ReferenceType)
    {
        case "Sites":
            return Libraries.SitePackages.Utilities.ExportSitePackage(
                context: context,
                ss: Site.SiteSettings);
        case "Issues":
        case "Results":
        case "Wikis":
            return Libraries.SitePackages.Utilities.ExportSitePackage(
                context: context,
                ss: Site.SiteSettings);
        default:
            return null;
    }
}

public string LockTable(Context context)
{
    SetSite(
        context: context,
        initSiteSettings: true);
    switch (Site.ReferenceType)
    {
            case "Issues":
            case "Results":
            return SiteUtilities.LockTable(
                context: context,
                ss: Site.SiteSettings);
        default:
            return Messages.ResponseNotFound(context: context).ToJson();
    }
}

public string UnlockTable(Context context)
{
    SetSite(
        context: context,
        initSiteSettings: true);
    switch (Site.ReferenceType)
    {
            case "Issues":
            case "Results":
            return SiteUtilities.UnlockTable(
                context: context,
                ss: Site.SiteSettings);
        default:
            return Messages.ResponseNotFound(context: context).ToJson();
    }
}

public string ForceUnlockTable(Context context)
{
    SetSite(
        context: context,
        initSiteSettings: true);
    switch (Site.ReferenceType)
    {
            case "Issues":
            case "Results":
            return SiteUtilities.ForceUnlockTable(
                context: context,
                ss: Site.SiteSettings);
        default:
            return Messages.ResponseNotFound(context: context).ToJson();
    }
}

public string SynchronizeTitles(Context context)
{
    SetSite(context: context, initSiteSettings: true);
    return SiteUtilities.SynchronizeTitles(
        context: context,
        siteModel: Site);
}

public string SynchronizeSummaries(Context context)
{
    SetSite(context: context);
    return SiteUtilities.SynchronizeSummaries(
        context: context,
        siteModel: Site);
}

public string SynchronizeFormulas(Context context)
{
    SetSite(context: context);
    return SiteUtilities.SynchronizeFormulas(
        context: context,
        siteModel: Site);
}

private void SetSite(
    Context context,
    bool siteOnly = false,
    bool initSiteSettings = false,
    bool setSiteIntegration = false,
    Sqls.TableTypes tableType = Sqls.TableTypes.Normal)
{
    Site = GetSite(
        context: context,
        siteOnly: siteOnly,
        initSiteSettings: initSiteSettings,
        setSiteIntegration: setSiteIntegration,
        tableType: tableType);
}

public SiteModel GetSite(
    Context context,
    bool siteOnly = false,
    bool initSiteSettings = false,
    bool setSiteIntegration = false,
    Sqls.TableTypes tableType = Sqls.TableTypes.Normal)
{
    SiteModel siteModel;
    if (ReferenceType == "Sites" && context.Forms.Exists("Ver"))
    {
        siteModel = new SiteModel();
        siteModel.Get(
            context: context,
            where: Rds.SitesWhere()
                .TenantId(context.TenantId)
                .SiteId(ReferenceId)
                .Ver(context.Forms.Int("Ver")),
            tableType: Sqls.TableTypes.NormalAndHistory);
        siteModel.VerType =  context.Forms.Bool("Latest")
            ? Versions.VerTypes.Latest
            : Versions.VerTypes.History;
    }
    else
    {
        siteModel = siteOnly
            ? new SiteModel(
                context: context,
                siteId: ReferenceId)
            : new SiteModel(
                context: context,
                siteId: ReferenceType == "Sites"
                    ? ReferenceId
                    : SiteId);
    }
    if (initSiteSettings)
    {
        siteModel.SiteSettings = SiteSettingsUtilities.Get(
            context: context,
            siteModel: siteModel,
            referenceId: ReferenceId,
            setSiteIntegration: setSiteIntegration,
            tableType: tableType);
    }
    return siteModel;
}