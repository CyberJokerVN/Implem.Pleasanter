public ErrorData Create(
    Context context,
    SiteSettings ss,
    Sqls.TableTypes tableType = Sqls.TableTypes.Normal,
    SqlParamCollection param = null,

<!--Model_CreateParams-->
<!--Model_CreateParams_Wikis-->

    bool otherInitValue = false,
    bool get = true)
{

<!--Model_SetTenantIdByContext-->
<!--Model_OnCreating_Binaries-->
<!--Model_OnCreating_Users-->

    var statements = new List<SqlStatement>();

<!--Model_OnCreatingExtendedSqls-->

    statements.AddRange(CreateStatements(
        context: context,

        <!--Model_SiteSettingsWithParameterNameLower-->

        tableType: tableType,
        param: param,
        otherInitValue: otherInitValue));

<!--Model_InsertIdentity-->
<!--Model_InsertIdentity ( HasIdentity = false, ItemOnly = true ) -->
<!--Model_IfDuplicatedReturn-->
<!--Model_InsertIdentitySet-->
<!--Model_ForceSynchronizeSummaryExecute-->
<!--Model_CreatedNotice-->
<!--Model_Insert_User-->

    if (get) Get(context: context<!--Model_SiteSettingsBeforeComma-->);

<!--Model_ReloadPermissions-->
<!--Model_InsertItemsAfter-->

    return new ErrorData(type: Error.Types.None);
}

public List<SqlStatement> CreateStatements(
    Context context,

    <!--Model_SiteSettingsParameter-->

    string dataTableName = null,
    Sqls.TableTypes tableType = Sqls.TableTypes.Normal,
    SqlParamCollection param = null,
    bool otherInitValue = false)
{
    var statements = new List<SqlStatement>();

<!--Model_IfDuplicated-->

    statements.AddRange(new List<SqlStatement>
    {

<!--Model_InsertItems-->

        Rds.Insert#TableName#(
            dataTableName: dataTableName,
            tableType: tableType,

<!--Model_SelectIdentity-->

            param: param ?? Rds.#TableName#ParamDefault(
                context: context,
                #modelName#Model: this,
                setDefault: true,
                otherInitValue: otherInitValue))<!--Comma ( ItemOnly = 1 ) --><!--Comma ( UpdateMonitor = 1 ) -->

<!--Model_InsertGroupMember-->
<!--Model_InsertLinksByCreate-->
<!--Model_UpdateStatus-->

    });
    statements.AddRange(UpdateAttachmentsStatements(context: context));

<!--Model_CreatePermissions-->

    return statements;
}