public static string BulkMove(Context context, SiteSettings ss)
{
    var where = SelectedWhere(
        context: context,
        ss: ss);
    if (where == null)
    {
        return Messages.ResponseSelectTargets(context: context).ToJson();
    }
    var siteId = context.Forms.Long("MoveTargets");
    if (context.ContractSettings.ItemsLimit(
        context: context,
        siteId: siteId,
        number: BulkMoveCount(
            context: context,
            ss: ss,
            siteId: siteId,
            where: where)))
    {
        return Error.Types.ItemsLimit.MessageJson(context: context);
    }
    if (Permissions.CanMove(
        context: context,
        source: ss,
        destination: SiteSettingsUtilities.Get(
            context: context,
            siteId: siteId,
            referenceId: siteId)))
    {
        var count = BulkMove(
            context: context,
            ss: ss,
            siteId: siteId,
            where: Views.GetBySession(
                context: context,
                ss: ss)
                    .Where(
                        context: context,
                        ss: ss,
                        where: where,
                        itemJoin: false));
        Summaries.Synchronize(context: context, ss: ss);
        return GridRows(
            context: context,
            ss: ss,
            clearCheck: true,
            message: Messages.BulkMoved(
                context: context,
                data: count.ToString()));
    }
    else
    {
        return Messages.ResponseHasNotPermission(context: context).ToJson();
    }
}

private static int BulkMoveCount(
    Context context,
    SiteSettings ss,
    long siteId,
    SqlWhereCollection where)
{
    return Repository.ExecuteScalar_int(
        context: context,
        statements: Rds.Select#TableName#(
            column: Rds.#TableName#Column().#TableName#Count(),
            join: ss.Join(
                context: context,
                join: where),
            where: where));
}

private static int BulkMove(
    Context context,
    SiteSettings ss,
    long siteId,
    SqlWhereCollection where)
{
    var sub = Rds.Select#TableName#(
        column: Rds.#TableName#Column().#ModelName#Id(),
        where: where);
    var guid = Strings.NewGuid();
    return Repository.ExecuteScalar_response(
        context: context,
        transactional: true,
        statements: new SqlStatement[]
        {
            Rds.UpdateItems(
                where: Rds.ItemsWhere()
                    .SiteId(ss.SiteId)
                    .ReferenceId_In(sub: sub),
                param: Rds.ItemsParam()
                    .ReferenceType(guid)),
            Rds.Update#TableName#(
                where: where,
                param: Rds.#TableName#Param()
                    .SiteId(siteId)),
            Rds.RowCount(),
            Rds.UpdateItems(
                where: Rds.ItemsWhere()
                    .SiteId(ss.SiteId)
                    .ReferenceType(guid),
                param: Rds.ItemsParam()
                    .SiteId(siteId)
                    .ReferenceType(ss.ReferenceType))
        }).Count.ToInt();
}