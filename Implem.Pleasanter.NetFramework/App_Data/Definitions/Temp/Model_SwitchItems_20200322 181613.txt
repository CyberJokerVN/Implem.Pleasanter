public string Index(Context context)
{
    if (ReferenceId == 0)
    {
        return SiteUtilities.SiteTop(context: context);
    }
    if (ReferenceType != "Sites")
    {
        return HtmlTemplates.Error(
            context: context,
            errorData: new ErrorData(type: Error.Types.NotFound));
    }
    SetSite(
        context: context,
        initSiteSettings: true,
        setSiteIntegration: true);
    ViewModes.Set(context: context, siteId: Site.SiteId);
    switch (Site.ReferenceType)
    {
        case "Sites":
            return SiteUtilities.SiteMenu(context: context, siteModel: Site);

<!--Model_IndexCases-->

        default:
            return HtmlTemplates.Error(
                context: context,
                errorData: new ErrorData(type: Error.Types.NotFound));
    }
}

public string IndexJson(Context context)
{
    if (ReferenceType != "Sites")
    {
        return Messages.ResponseNotFound(context: context).ToJson();
    }
    SetSite(
        context: context,
        initSiteSettings: true,
        setSiteIntegration: true);
    ViewModes.Set(context: context, siteId: Site.SiteId);
    switch (Site.ReferenceType)
    {

<!--Model_IndexJsonCases-->

        default:
            return Messages.ResponseNotFound(context: context).ToJson();
    }
}

public string TrashBox(Context context)
{
    if (ReferenceId != 0 && ReferenceType != "Sites")
    {
        return HtmlTemplates.Error(
            context: context,
            errorData: new ErrorData(type: Error.Types.NotFound));
    }
    SetSite(
        context: context,
        initSiteSettings: true,
        setSiteIntegration: true,
        tableType: Sqls.TableTypes.Deleted);
    ViewModes.Set(context: context, siteId: Site.SiteId);
    if (ReferenceId == 0)
    {
        return SiteUtilities.TrashBox(context: context, ss: Site.SiteSettings);
    }
    switch (Site.ReferenceType)
    {

<!--Model_TrashBoxCases-->

        default:
            return HtmlTemplates.Error(
                context: context,
                errorData: new ErrorData(type: Error.Types.NotFound));
    }
}

public string TrashBoxJson(Context context)
{
    if (ReferenceType != "Sites")
    {
        return Messages.ResponseNotFound(context: context).ToJson();
    }
    SetSite(
        context: context,
        initSiteSettings: true,
        setSiteIntegration: true,
        tableType: Sqls.TableTypes.Deleted);
    ViewModes.Set(context: context, siteId: Site.SiteId);
    switch (Site.ReferenceType)
    {

<!--Model_TrashBoxJsonCases-->

        default:
            return Messages.ResponseNotFound(context: context).ToJson();
    }
}

public string Calendar(Context context)
{
    SetSite(context: context);
    ViewModes.Set(context: context, siteId: Site.SiteId);
    switch (Site.ReferenceType)
    {

<!--Model_CalendarCases-->

        default:
            return HtmlTemplates.Error(
                context: context,
                errorData: new ErrorData(type: Error.Types.NotFound));
    }
}

public string CalendarJson(Context context)
{
    SetSite(context: context);
    ViewModes.Set(context: context, siteId: Site.SiteId);
    switch (Site.ReferenceType)
    {

<!--Model_CalendarJsonCases-->

        default:
            return Messages.ResponseNotFound(context: context).ToJson();
    }
}

public string Crosstab(Context context)
{
    SetSite(context: context);
    ViewModes.Set(context: context, siteId: Site.SiteId);
    switch (Site.ReferenceType)
    {

<!--Model_CrosstabCases-->

        default:
            return HtmlTemplates.Error(
                context: context,
                errorData: new ErrorData(type: Error.Types.NotFound));
    }
}

public string CrosstabJson(Context context)
{
    SetSite(context: context);
    ViewModes.Set(context: context, siteId: Site.SiteId);
    switch (Site.ReferenceType)
    {

<!--Model_CrosstabJsonCases-->

        default:
            return Messages.ResponseNotFound(context: context).ToJson();
    }
}

public string Gantt(Context context)
{
    SetSite(context: context);
    ViewModes.Set(context: context, siteId: Site.SiteId);
    switch (Site.ReferenceType)
    {

<!--Model_GanttCases-->

        default:
            return HtmlTemplates.Error(
                context: context,
                errorData: new ErrorData(type: Error.Types.NotFound));
    }
}

public string GanttJson(Context context)
{
    SetSite(context: context);
    ViewModes.Set(context: context, siteId: Site.SiteId);
    switch (Site.ReferenceType)
    {

<!--Model_GanttJsonCases-->

        default:
            return Messages.ResponseNotFound(context: context).ToJson();
    }
}

public string BurnDown(Context context)
{
    SetSite(
        context: context,
        initSiteSettings: true,
        setSiteIntegration: true);
    ViewModes.Set(context: context, siteId: Site.SiteId);
    switch (Site.ReferenceType)
    {

<!--Model_BurnDownCases-->

        default:
            return HtmlTemplates.Error(
                context: context,
                errorData: new ErrorData(type: Error.Types.NotFound));
    }
}

public string BurnDownJson(Context context)
{
    SetSite(
        context: context,
        initSiteSettings: true,
        setSiteIntegration: true);
    ViewModes.Set(context: context, siteId: Site.SiteId);
    switch (Site.ReferenceType)
    {

<!--Model_BurnDownJsonCases-->

        default:
            return Messages.ResponseNotFound(context: context).ToJson();
    }
}

public string BurnDownRecordDetailsJson(Context context)
{
    SetSite(
        context: context,
        initSiteSettings: true,
        setSiteIntegration: true);
    switch (Site.ReferenceType)
    {

<!--Model_BurnDownRecordDetailsJsonCases-->

        default:
            return Messages.ResponseNotFound(context: context).ToJson();
    }
}

public string TimeSeries(Context context)
{
    SetSite(context: context);
    ViewModes.Set(context: context, siteId: Site.SiteId);
    switch (Site.ReferenceType)
    {

<!--Model_TimeSeriesCases-->

        default:
            return HtmlTemplates.Error(
                context: context,
                errorData: new ErrorData(type: Error.Types.NotFound));
    }
}

public string TimeSeriesJson(Context context)
{
    SetSite(context: context);
    ViewModes.Set(context: context, siteId: Site.SiteId);
    switch (Site.ReferenceType)
    {

<!--Model_TimeSeriesJsonCases-->

        default:
            return Messages.ResponseNotFound(context: context).ToJson();
    }
}

public string Kamban(Context context)
{
    SetSite(context: context);
    ViewModes.Set(context: context, siteId: Site.SiteId);
    switch (Site.ReferenceType)
    {

<!--Model_KambanCases-->

        default:
            return HtmlTemplates.Error(
                context: context,
                errorData: new ErrorData(type: Error.Types.NotFound));
    }
}

public string KambanJson(Context context)
{
    SetSite(context: context);
    ViewModes.Set(context: context, siteId: Site.SiteId);
    switch (Site.ReferenceType)
    {

<!--Model_KambanJsonCases-->

        default:
            return Messages.ResponseNotFound(context: context).ToJson();
    }
}

public string ImageLib(Context context)
{
    SetSite(context: context);
    ViewModes.Set(context: context, siteId: Site.SiteId);
    switch (Site.ReferenceType)
    {

<!--Model_ImageLibCases-->

        default:
            return HtmlTemplates.Error(
                context: context,
                errorData: new ErrorData(type: Error.Types.NotFound));
    }
}

public string ImageLibJson(Context context)
{
    SetSite(context: context);
    ViewModes.Set(context: context, siteId: Site.SiteId);
    switch (Site.ReferenceType)
    {

<!--Model_ImageLibJsonCases-->

        default:
            return Messages.ResponseNotFound(context: context).ToJson();
    }
}

public string New(Context context)
{
    SetSite(
        context: context,
        siteOnly: true,
        initSiteSettings: true);
    switch (Site.ReferenceType)
    {

<!--Model_NewCases-->

        default:
            return HtmlTemplates.Error(
                context: context,
                errorData: new ErrorData(type: Error.Types.NotFound));
    }
}

public string NewJson(Context context)
{
    return new ResponseCollection()
        .ReplaceAll("#MainContainer", New(context: context))
        .WindowScrollTop()
        .FocusMainForm()
        .ClearFormData()
        .PushState("Edit", Locations.Get(
            context: context,
            parts: new string[]
            {
                "Items",
                ReferenceId.ToString(),
                "New"
            }))
        .ToJson();
}

public string NewOnGrid(Context context)
{
    SetSite(
        context: context,
        siteOnly: true,
        initSiteSettings: true);
    switch (Site.ReferenceType)
    {

<!--Model_NewOnGridCases-->

        default:
            return HtmlTemplates.Error(
                context: context,
                errorData: new ErrorData(type: Error.Types.NotFound));
    }
}

public string CancelNewRow(Context context)
{
    SetSite(
        context: context,
        siteOnly: true,
        initSiteSettings: true);
    switch (Site.ReferenceType)
    {

<!--Model_CancelNewRowCases-->

        default:
            return Messages.ResponseNotFound(context: context).ToJson();
    }
}

public string Editor(Context context)
{
    SetSite(context: context);
    switch (ReferenceType)
    {
        case "Sites":
            return SiteUtilities.Editor(
                context: context,
                siteId: ReferenceId,
                clearSessions: true);

<!--Model_EditorCases-->

        default:
            return HtmlTemplates.Error(
                context: context,
                errorData: new ErrorData(type: Error.Types.NotFound));
    }
}

public string LinkTable(Context context)
{
    var dataTableName = context.Forms.Data("TableId");
    return new ResponseCollection()
        .ReplaceAll("#" + dataTableName, new HtmlBuilder()
            .LinkTable(
                context: context,
                siteId: context.Forms.Long("TableSiteId"),
                direction: context.Forms.Data("Direction"),
                dataTableName: dataTableName))
        .ToJson();
}

public string Import(Context context)
{
    SetSite(context: context);
    switch (Site.ReferenceType)
    {

<!--Model_ImportCases-->

        default:
            return Messages.ResponseNotFound(context: context).ToJson();
    }
}

public string OpenExportSelectorDialog(Context context)
{
    SetSite(context: context);
    switch (Site.ReferenceType)
    {

<!--Model_OpenExportSelectorDialogCases-->

        default:
            return Messages.ResponseNotFound(context: context).ToJson();
    }
}

public string OpenSetNumericRangeDialog(Context context)
{
    SetSite(
        context: context,
        initSiteSettings: true);
    if (context.CanRead(Site.SiteSettings))
    {
        var columnName = context.Forms.ControlId()
            .Replace("ViewFilters__", string.Empty)
            .Replace("_NumericRange", string.Empty);
        var column = Site.SiteSettings.GetColumn(
            context: context,
            columnName: columnName);
        return new ResponseCollection()
            .Html(
                "#SetNumericRangeDialog",
                new HtmlBuilder().SetNumericRangeDialog(
                    context: context,
                    ss: Site.SiteSettings,
                    column: column,
                    itemfilter: true))
            .ToJson();
    }
    else
    {
        return Messages.ResponseNotFound(context: context).ToJson();
    }
}

public string OpenSetDateRangeDialog(Context context)
{
    SetSite(
        context: context,
        initSiteSettings: true);
    if (context.CanRead(Site.SiteSettings))
    {
        var columnName = context.Forms.ControlId()
            .Replace("ViewFilters__", string.Empty)
            .Replace("_DateRange", string.Empty);
        var column = Site.SiteSettings.GetColumn(
            context: context,
            columnName: columnName);
        return new ResponseCollection()
            .Html(
                "#SetDateRangeDialog",
                new HtmlBuilder().
                    Input(
                        attributes: new HtmlAttributes()
                            .Style("opacity: 0; position: absolute; top: 0; left: 0;"))
                    .SetDateRangeDialog(
                        context: context,
                        ss: Site.SiteSettings,
                        column: column,
                        itemfilter: true))
            .ToJson();
    }
    else
    {
        return Messages.ResponseNotFound(context: context).ToJson();
    }
}

public ResponseFile Export(Context context)
{
    SetSite(context: context);
    switch (Site.ReferenceType)
    {

<!--Model_ExportCases-->

        default:
            return null;
    }
}

public string ExportAsync(Context context)
{
    SetSite(context: context);
    var export = Site.SiteSettings.Exports?
        .Where(exp => exp.Id == context.Forms.Int("ExportId"))?
        .FirstOrDefault();
    if(export?.ExecutionType != Libraries.Settings.Export.ExecutionTypes.MailNotify)
    {
        return Error.Types.InvalidRequest.MessageJson(context: context);
    }
    if(MailAddressUtilities.Get(context: context, context.UserId).IsNullOrEmpty())
    {
        return Messages.ResponseExportNotSetEmail(
            context: context, 
            target: null, 
            $"{context.User.Name}<{context.User.LoginId}>").ToJson();
    }
    switch (Site.ReferenceType)
    {
        
<!--Model_ExportAsyncCases-->

        default:
            return Error.Types.InvalidRequest.MessageJson(context: context);
    }
}

public ResponseFile ExportCrosstab(Context context)
{
    SetSite(context: context);
    switch (Site.ReferenceType)
    {

<!--Model_ExportCrosstabCases-->

        default:
            return null;
    }
}

public string SearchDropDown(Context context)
{
    SetSite(context: context);
    var controlId = context.Forms.Data("DropDownSearchTarget");
    var filter = controlId.StartsWith("ViewFilters__") 
        || controlId.StartsWith("ViewFiltersOnGridHeader__");
    var searchText = context.Forms.Data("DropDownSearchText");
    string parentClass = context.Forms.Data("DropDownSearchParentClass");
    int parentId = context.Forms.Int("DropDownSearchParentDataId");
    switch (context.Forms.ControlId())
    {
        case "DropDownSearchResults":
            return
                AppendSearchDropDown(
                    context: context,
                    controlId: controlId,
                    searchText: searchText,
                    filter: filter,
                    parentClass: parentClass,
                    parentId: parentId);
        default:
            return SearchDropDown(
                context: context,
                controlId: controlId,
                searchText: searchText,
                filter: filter,
                parentClass: parentClass,
                parentId: parentId);
    }
}

private string AppendSearchDropDown(
    Context context,
    string controlId,
    string searchText,
    bool filter,
    string parentClass = "",
    int parentId = 0)
{
    var offset = context.Forms.Int("DropDownSearchResultsOffset");
    var column = SearchDropDownColumn(
        context: context,
        controlId: controlId,
        searchText: searchText,
        filter: filter,
        offset: offset,
        parentClass: parentClass,
        parentId: parentId);
    var nextOffset = Paging.NextOffset(
        offset: offset,
        totalCount: column.TotalCount,
        pageSize: Parameters.General.DropDownSearchPageSize);
    return new ResponseCollection()
        .Append("#DropDownSearchResults", new HtmlBuilder()
            .SelectableItems(
                listItemCollection: column?.EditChoices(
                    context: context,
                    addNotSet: offset == 0)))
        .Val("#DropDownSearchResultsOffset", nextOffset)
        .ToJson();
}

private string SearchDropDown(
    Context context,
    string controlId,
    string searchText,
    bool filter,
    string parentClass = "",
    int parentId = 0)
{
    var column = SearchDropDownColumn(
        context: context,
        controlId: controlId,
        searchText: searchText,
        filter: filter,
        parentClass: parentClass,
        parentId: parentId);
    var nextOffset = Paging.NextOffset(
        offset: 0,
        totalCount: column.TotalCount,
        pageSize: Parameters.General.DropDownSearchPageSize);
    return new ResponseCollection()
        .ReplaceAll(
            "#DropDownSearchResults",
            new HtmlBuilder().Selectable(
                controlId: "DropDownSearchResults",
                listItemCollection: column?.EditChoices(
                    context: context,
                    addNotSet: true),
                action: "SearchDropDown",
                method: "post"))
        .Val("#DropDownSearchResultsOffset", nextOffset)
        .ClearFormData("DropDownSearchResults")
        .ToJson();
}

public string SelectSearchDropDown(Context context)
{
    SetSite(context: context);
    var controlId = context.Forms.Data("DropDownSearchTarget");
    var filter = controlId.StartsWith("ViewFilters__") 
        || controlId.StartsWith("ViewFiltersOnGridHeader__");
    var searchText = context.Forms.Data("DropDownSearchText");
    var column = SearchDropDownColumn(
        context: context,
        controlId: controlId,
        searchText: searchText,
        filter: filter);
    var selected = context.Forms.List("DropDownSearchResults");
    var multiple = context.Forms.Bool("DropDownSearchMultiple");
    if (multiple)
    {
        return SelectSearchDropDownResponse(
            context: context,
            controlId: controlId,
            column: column,
            selected: selected,
            filter: filter,
            multiple: multiple);
    }
    else if (selected.Count() != 1)
    {
        return new ResponseCollection()
            .Message(Messages.SelectOne(context: context))
            .ToJson();
    }
    else
    {
        return SelectSearchDropDownResponse(
            context: context,
            controlId: controlId,
            column: column,
            selected: selected,
            filter: filter,
            multiple: multiple);
    }
}

private Column SearchDropDownColumn(
    Context context,
    string controlId,
    string searchText,
    bool filter,
    int offset = 0,
    string parentClass = "",
    int parentId = 0)
{
    var ss = SiteSettingsUtilities.Get(
        context: context,
        siteModel: Site,
        referenceId: ReferenceId,
        setSiteIntegration: true);
    var column = ss.GetColumn(
        context: context,
        columnName: filter
            ? (controlId.StartsWith("ViewFilters__")
                ? controlId.Substring("ViewFilters__".Length)
                : controlId.Substring("ViewFiltersOnGridHeader__".Length))
            : controlId.Split_2nd('_'));
    var searchIndexes = searchText.SearchIndexes();
    if (column?.Linked() == true)
    {
        column?.SetChoiceHash(
            context: context,
            siteId: column.SiteId,
            linkHash: column.SiteSettings.LinkHash(
                context: context,
                columnName: column.Name,
                searchIndexes: searchIndexes,
                offset: offset,
                parentClass: parentClass,
                parentId: parentId,
                setTotalCount: true),
            searchIndexes: searchIndexes);
    }
    else
    {
        ss.SetChoiceHash(
            context: context,
            columnName: column?.ColumnName,
            searchIndexes: searchIndexes,
            setTotalCount: true);
    }
    return column;
}

private static string SelectSearchDropDownResponse(
    Context context,
    string controlId,
    Column column,
    List<string> selected,
    bool filter,
    bool multiple)
{
    if (selected.Any() &&
        !selected.All(o => column.ChoiceHash.ContainsKey(o)))
    {
        column.SiteSettings.SetChoiceHash(
            context: context,
            columnName: column.ColumnName,
            selectedValues: selected);
    }
    var optionCollection = column?.EditChoices(
        context: context,
        addNotSet: true)?
            .Where(o => selected.Contains(o.Key))
            .ToDictionary(o => o.Key, o => o.Value);
    return optionCollection?.Any() == true
        ? new ResponseCollection()
            .CloseDialog("#DropDownSearchDialog")
            .Html("[id=\"" + controlId + "\"]", new HtmlBuilder()
                .OptionCollection(
                    context: context,
                    optionCollection: optionCollection,
                    selectedValue: SelectSearchDropDownSelectedValue(
                        context: context,
                        selected: selected,
                        filter: filter,
                        multiple: multiple),
                    multiple: multiple,
                    insertBlank: !filter))
            .Invoke("setDropDownSearch")
            .Trigger("#" + controlId, "change")
            .ToJson()
        : new ResponseCollection()
            .Message(Messages.NotFound(context: context))
            .ToJson();
}

public static string SelectSearchDropDownSelectedValue(
    Context context, List<string> selected, bool filter, bool multiple)
{
    if (multiple)
    {
        return selected.ToJson();
    }
    else
    {
        var value = selected.FirstOrDefault();
        return !filter && value == "\t"
            ? null
            : selected.FirstOrDefault();
    }
}